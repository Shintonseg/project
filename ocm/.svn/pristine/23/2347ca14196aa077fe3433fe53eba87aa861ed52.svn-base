buildscript {
	ext {
		springBootVersion = '2.6.3'
	}
	repositories {
		mavenCentral()
//		mavenLocal()
		// jcenter()
		gradlePluginPortal()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.hibernate:hibernate-gradle-plugin:5.6.0.Final")
	}
}

plugins {
	// id 'net.ltgt.apt' version '0.21'
	id 'java'
	id 'eclipse-wtp'
	id 'idea'
	id 'org.springframework.boot' version '2.6.3'
	id 'war'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'maven'
	id "jacoco"
	id "org.sonarqube" version "3.3"
	id "com.github.roroche.plantuml" version "1.0.2"
    id "org.hibernate.orm" version "6.2.2.Final"
}

hibernate {
    enhance {
        enableLazyInitialization = true
        enableDirtyTracking = true
        enableAssociationManagement = true
        enableExtendedEnhancement = false
    }
}

ext['hibernate.version'] = '5.6.0.Final'

version = '1.7.0' + (System.getenv('BUILD_NUMBER')?'-' + System.getenv('BUILD_NUMBER'): '-SNAPSHOT')
group = 'com.tible'

war {
	archiveName project.name +".war"
	enabled = false
	manifest {
		attributes(
				'Implementation-Title': name,
				'Implementation-Version': archiveVersion
		)
	}
}

bootWar {
	archiveName project.name +".war"
	manifest {
		attributes(
				'Implementation-Title': name,
				'Implementation-Version': archiveVersion
		)
	}
}

sourceCompatibility = 1.11
targetCompatibility = 1.11

repositories {
	maven {
		url "https://nexus.tible.com/repository/maven-public/"
		credentials {
			username = "jenkinsforrepo"
			password = "Y9q6ara2w3234R5f59Px0XOhBD"
		}
	}
	mavenCentral()
//	mavenLocal()
}

processResources {
	filesMatching('**/*.yml') { expand(project.properties) }
}

javadoc {
	source = sourceSets.main.allJava
}

/*configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}*/

idea {
    module {
        sourceDirs += file('src/main/generated/')
        generatedSourceDirs += file('src/main/generated/')
    }
}

/*compileJava {
	options.compilerArgs << "-s"
	options.compilerArgs << ("$projectDir/src/main/generated" as String)

	doFirst {
		file(new File(projectDir, "src/main/generated")).mkdirs()
	}
}*/

clean.doLast {
	// delete sourceSets.generated.java old way
	// clean-up directory when necessary
	file(new File(projectDir, "src/main/generated")).deleteDir()
}

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')  {
		exclude group: 'org.apache.tomcat', module: 'tomcat-jdbc'
	}
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'

	implementation 'org.springframework.security.oauth:spring-security-oauth2:2.5.1.RELEASE'

	implementation 'org.springframework.security:spring-security-jwt:1.1.1.RELEASE'

	implementation 'com.jcraft:jsch:0.1.55'
	implementation 'com.querydsl:querydsl-core:5.0.0'
	implementation 'com.querydsl:querydsl-jpa:5.0.0'
	implementation 'com.querydsl:querydsl-apt:5.0.0:jpa'
	implementation 'org.hibernate:hibernate-validator:7.0.1.Final'

//	implementation 'org.liquibase:liquibase-core:4.7.1'
//	implementation 'com.oracle.database.jdbc:ojdbc11'
//	implementation 'com.oracle.database.jdbc:ucp'
	implementation 'com.zaxxer:HikariCP:5.0.1'
	implementation 'io.dropwizard.metrics:metrics-core:4.2.7'

	implementation 'com.fasterxml.jackson.module:jackson-module-parameter-names'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

	implementation 'org.apache.commons:commons-compress:1.21'
	implementation 'org.apache.xmlbeans:xmlbeans:5.0.3'
	implementation 'javax.inject:javax.inject:1'
	implementation 'mysql:mysql-connector-java'
	implementation 'commons-net:commons-net:3.8.0'

	implementation 'com.google.code.gson:gson'
	implementation 'com.tible.hawk.core:hawk-core:0.3.0.1275'

//	implementation "io.hypersistence:hypersistence-optimizer:2.7.0"

	// https://mvnrepository.com/artifact/org.codehaus.janino/janino
	implementation 'org.codehaus.janino:janino:3.1.6'
	implementation 'junit:junit:4.13.2'

	implementation 'io.cucumber:cucumber-java:7.8.1'
	implementation 'io.cucumber:cucumber-spring:7.8.1'
	testImplementation 'io.cucumber:cucumber-junit:7.8.1'

	testImplementation 'org.testcontainers:junit-jupiter:1.17.5'
	testImplementation "org.testcontainers:testcontainers:1.17.5"
	testImplementation 'org.testcontainers:mongodb:1.17.5'
	testImplementation "org.testcontainers:rabbitmq:1.17.5"
	testImplementation "org.testcontainers:mysql:1.17.5"
	testImplementation 'org.testcontainers:consul:1.17.5'

	compileOnly 'org.projectlombok:lombok:1.18.22'
	annotationProcessor 'org.projectlombok:lombok:1.18.22'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

	testImplementation 'org.springframework.boot:spring-boot-configuration-processor'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation('org.mockito:mockito-core:4.3.1')
	testImplementation('org.mockito:mockito-inline:4.3.1')
	testImplementation 'com.h2database:h2'

	annotationProcessor (
			'com.querydsl:querydsl-apt:5.0.0:jpa',
			"org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final",
			"javax.annotation:javax.annotation-api:1.3.2",
	)
}

test {
	useJUnitPlatform()
}

uploadArchives {
	repositories {
		mavenDeployer {
			def baseUrl = project.findProperty('repo_contextUrl') ?: 'https://nexus.tible.com/repository'
			def user = project.findProperty('repo_user') ?: 'jenkinsforrepo'
			def pw = project.findProperty('repo_password') ?: 'Y9q6ara2w3234R5f59Px0XOhBD'
			repository(url: "${baseUrl}/maven-releases/") {
				authentication(userName: user, password: pw)
			}
			snapshotRepository(url: "${baseUrl}/maven-snapshots/") {
				authentication(userName: user, password: pw)
			}
			pom.version = project.version
			pom.artifactId = project.name
			pom.groupId = project.group
		}
	}
}

jacocoTestReport {
	reports {
		xml.enabled true
	}
}

plugins.withType(JacocoPlugin) {
	tasks["test"].finalizedBy 'jacocoTestReport'
}

sonarqube {
	properties {
		System.setProperty('sonar.host.url', 'https://sonar.tible.com')
		System.setProperty('sonar.login', '91727a9a3701b4dbf14a1823e8702481724e6fca')
		property "sonar.svn.username", "jenkinsshare"
		property "sonar.svn.password.secured", "wrefaw55b7Ek12ADF"
		property "sonar.scm.url", "scm:svn:https://svn.tible.com/Stichting_Retourverpakking_Nederland/trunk/ocm"
	}
}

classDiagram {
	File directory = new File('classDiagram')
	if (!directory.exists()){
		directory.mkdir()
	}
	packageName = "com.tible.ocm"
	outputFile = project.file('classDiagram/ocm_class_diagram.puml')
}
build.finalizedBy(buildClassDiagram)
